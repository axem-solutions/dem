{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-dem","title":"What is DEM?","text":"<p>DEM (Development Environment Manager) is an open-source command line tool for setting up, managing, and sharing Development Environments.</p> <p>DEM empowers developers to create, modify, and maintain consistent Development Environments with ease.</p> <p>By adopting DEM's methodologies for environment setup and management, you can significantly reduce context switching and time to market.</p>"},{"location":"#pain-points-addressed-by-dem","title":"Pain points addressed by DEM","text":"<p>Common pain points</p> <p>Learn by doing!</p> <p>Try our tutorial  with a simple embedded project!</p>"},{"location":"#1-inconsistent-development-environments","title":"1. Inconsistent Development Environments","text":"<ul> <li>Issue: \"It works on my machine\" scenarios leading to inconsistencies.</li> <li>Solution: Consistent Development Environments for every developer.</li> </ul>"},{"location":"#2-time-consuming-setup","title":"2. Time-consuming Setup","text":"<ul> <li>Issue: Slow and error-prone setup of Development Environments.</li> <li>Solution: Quick and reproducible installation with a single command.</li> </ul>"},{"location":"#3-complex-tool-management","title":"3. Complex Tool Management","text":"<ul> <li>Issue: Modifying the toolset is hard and time-consuming.</li> <li>Solution: Easy and scalable Dev Env management where tools are like building blocks.</li> </ul>"},{"location":"#4-interruptions-in-workflow","title":"4. Interruptions in Workflow","text":"<ul> <li>Issue: Developers getting out of flow due to tool configurations.</li> <li>Solution: Developers can focus on their actual work.</li> </ul>"},{"location":"#5-vendor-specific-limitations","title":"5. Vendor-specific Limitations","text":"<ul> <li>Issue: Vendor-specific interfaces causing standardization issues.</li> <li>Solution: Standardized Development Environments.</li> </ul>"},{"location":"#key-features-of-dem","title":"Key features of DEM","text":""},{"location":"#loose-coupling-between-tools","title":"Loose Coupling Between Tools","text":"<ul> <li>Traditional IDEs can make standalone usage of underlying tools difficult.</li> <li>DEM reduces dependencies and allows for standalone tool usage.</li> </ul>"},{"location":"#isolated-tool-environments","title":"Isolated Tool Environments","text":"<ul> <li>Tools can interfere with each other or the host system in generic setups.</li> <li>DEM uses containerization to create isolated environments for tools, ensuring consistency.</li> </ul>"},{"location":"#scalable-tool-management","title":"Scalable Tool Management","text":"<ul> <li>Changes in development tools are frequent.</li> <li>DEM allows quick swapping of tool images and ensures safe coexistence of different tool versions.</li> </ul>"},{"location":"#reliable-development-environment-sharing","title":"Reliable Development Environment Sharing","text":"<ul> <li>Consistency across Development Environments is crucial.</li> <li>DEM enables easy sharing of Development Environments with coworkers.</li> </ul>"},{"location":"#quick-and-reproducible-setup","title":"Quick and Reproducible Setup","text":"<ul> <li>Setting up new projects or modifying old ones can be time-consuming.</li> <li>DEM ensures quick and simple installation, and allows for reinstallation whenever needed.</li> </ul> <p>DEM for Linux</p> <p>Linux operating system is fully supported.</p> <p>Check out the Installation section  and feel free to ask any questions in our community through  Discord.</p> <p>DEM for Windows</p> <p>DEM can be used both natively on Windows and in Windows Subsystem for Linux (WSL).</p> <p>Check out the Installation section  and feel free to ask any questions in our community through  Discord.</p> <p>DEM for Mac</p> <p>Coming soon...</p> <p>macOS is not yet officially supported. However, if all prerequisites are met, DEM should work on  macOS as well.</p> <p>Feel free to join our open-source community and test DEM on macOS. Please report your findings  on GitHub or in our community through  Discord.</p> <p>Container engines</p> <p>Currently, only the Docker Container Engine is supported.</p>"},{"location":"basics/","title":"The basic concepts of Development Environment Management","text":""},{"location":"basics/#what-is-a-development-environment","title":"What is a Development Environment?","text":"<p>A set of software tools used for a specific development project is called a Development Environment. These tools can include the build system, debugger, test framework, and more.</p>"},{"location":"basics/#a-container-image","title":"A Container Image","text":"<p>A container image is a set of software components alongside its dependencies,  which can be run in a container.</p>"},{"location":"basics/#a-tool-container-image","title":"A Tool Container Image","text":"<p>The concept involves packaging the tools from a Development Environment into dedicated images,  allowing them to operate independently and in isolation.</p>"},{"location":"basics/#development-environment-descriptor","title":"Development Environment Descriptor","text":"<p>Each Development Environment has a descriptor. A descriptor, like a blueprint, indicates which tools are required in the project, and the place their container images are stored.</p> <p></p>"},{"location":"basics/#container-engine","title":"Container Engine","text":"<p>The container engine is responsible for running the container images.  DEM utilizes the Docker Container Engine to run the tool images.</p>"},{"location":"basics/#registry-and-repository","title":"Registry and Repository","text":"<p>A registry acts as a storage for tool images, allowing them to be stored without consuming space on a developer's computer.  This storage facilitates easy sharing of images among collaborators, ensuring consistent tool usage across the project team. When an image is uploaded to a registry, it triggers the creation of a repository. This repository manages the various versions of the image.</p> <p>Note</p> <p>An image repository stores the different versions of the same image. An image registry is a collection of image repositories.</p> <p>In the background, DEM also uses registries to store the tool images. To list the currently  available registries use the <code>dem list-reg</code> command.  You can add or delete registries using the dem add-reg and dem del-reg commands.</p> <p>Note</p> <p>DEM supports the Docker Hub and  Docker Registry</p> <p>To request support for other registry types, start a discussion in our community through Discord.</p>"},{"location":"basics/#development-environment-catalogs","title":"Development Environment Catalogs","text":"<p>A catalog is a collection of Development Environment descriptors. DEM can manage multiple catalogs. To list the currently available ones use the <code>dem list-cat</code>  command.  The <code>dem add-cat</code> and <code>dem del-cat</code> commands can be used to add or delete catalogs.</p> <p>axem default catalog</p> <p>axem has its own catalog, which is available by default.</p> <p>Users can browse these catalogs, and download a copy of the Development Environment descriptor  to their local catalog.</p> <p></p>"},{"location":"basics/#development-platform","title":"Development Platform","text":"<p>The registries, the catalogs, and the entire development infrastructure form the Development  Platform. </p> <p>Example Tutorial</p> <p>Learn by doing! Try our tutorial  with a simple embedded project!</p>"},{"location":"commands/","title":"Commands","text":"<p>Bug report</p> <p>We encourage you to join our open-source community.  If you find any errors, inaccuracies, or have suggestions to improve our documentation or tool, please report your findings on GitHub or start a conversation in our community through Discord.</p>"},{"location":"commands/#development-environment-management","title":"Development Environment management","text":""},{"location":"commands/#dem-add-task-dev_env_name-task_name-command","title":"<code>dem add-task DEV_ENV_NAME TASK_NAME COMMAND</code>","text":"<p>Description:</p> <p>Add a new task to the Development Environment.</p> <p>A task is a command that can be run in the context of the Development Environment.  The task can be run with the <code>dem run</code> command. </p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment. <code>TASK_NAME</code> Name of the task. <code>COMMAND</code> Command to run. Must be enclosed with quotes. <p>Examples:</p> Example Description <code>dem add-task dev_env_name list-dir \"ls -la\"</code> Add a new command called <code>list-dir</code> that lists the content of the current directory. The task can be executed with <code>dem run dev_env_name list-dir</code>. <code>dem add-task dev_env_name build \"docker run --rm -v \\\"$(pwd)\\\":/work axemsolutions/make_gnu-arm:13.2 make\"</code> Add a new command called <code>build</code> that builds the project in a docker container. The task can be executed with <code>dem run dev_env_name build</code>."},{"location":"commands/#dem-assign-dev_env_name-project_path","title":"<code>dem assign DEV_ENV_NAME, [PROJECT_PATH]</code>","text":"<p>Description:</p> <p>Assign a Development Environment to a project.</p> <p>If the project already has a Development Environment assigned, the user will be asked if they want to overwrite it or not.  Projects that have a Development Environment assigned, can be initialized with the <code>init</code> command.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to assign. <code>[PROJECT_PATH]</code> Path of the project to assign the Development Environment to. If not set, the current working directory will be used."},{"location":"commands/#dem-clone-dev_env_name","title":"<code>dem clone DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Clone a Development Environment descriptor from the catalogs. </p> <p>Only the Development Environment descriptor will be cloned, the required tool images won't be pulled. If a Development Environment with the same name has been already available on the host PC, the user will be asked if they want to overwrite it or not.</p> <p> After cloning, the Development Environment can be installed with the <code>install</code> command.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Clone the descriptor of the Dev Env."},{"location":"commands/#dem-cp-dev_env_name-new_dev_env_name","title":"<code>dem cp DEV_ENV_NAME NEW_DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Create a copy of an existing local Development Environment.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to copy. <code>NEW_DEV_ENV_NAME</code> Name of the New Development Environment."},{"location":"commands/#dem-create-dev_env_name","title":"<code>dem create DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Create a new Development Environment descriptor and save it to the local descriptor storage (catalog).</p> <p>Running this command will open up the Dev Env Settings Window:</p> <p></p> <p>The table on the left shows the available tool types. Select the ones you want to use in the  Development Environment. You can navigate with the  and  or   and  keys. Move the cursor to the tool image you would like to  select or deselect  and press the .  On the right side, you can see the tool images that are selected.</p> <p>When the Dev Env is ready, press  on the <code>save</code> button.</p> <p>Info</p> <p>After creation, the Development Environment can be installed with the <code>install</code> command.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to create."},{"location":"commands/#dem-delete-dev_env_name","title":"<code>dem delete DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Delete the Dev Env descriptor from the local descriptor storage. If the Dev Env is installed, the user will be asked whether they want to uninstall it.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to delete."},{"location":"commands/#dem-del-task-dev_env_name-task_name","title":"<code>dem del-task DEV_ENV_NAME TASK_NAME</code>","text":"<p>Description:</p> <p>Delete a task from the Development Environment.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment. <code>TASK_NAME</code> Name of the task to delete."},{"location":"commands/#dem-export-dev_env_name-path_to_export","title":"<code>dem export DEV_ENV_NAME [PATH_TO_EXPORT]</code>","text":"<p>Description:</p> <p>Export a Development Environment descriptor in JSON format to a text file. </p> <p>This file can be imported with the <code>import</code> command on another host.</p> <p>The way the file gets named can be set by the <code>PATH_TO_EXPORT</code> argument:</p> <ul> <li>Not set: The file gets saved to the current directory with the name of the Development  Environment and without extension.</li> <li>Only a name is set: The file gets saved with that name to the current directory, optionally  with the set extension.</li> <li>The argument is a directory path: The file gets saved there with the name of the Development  Environment, without extension.</li> <li>The argument is a path with the file name: The exported content gets saved into that file. The extension can be set with the file name.</li> </ul> <p>Note</p> <p>The exported file only contains the Development Environment descriptor in JSON format. For a  successful import the DEM needs access to all the registries where the required images are  stored.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> The name of the Development Environment to export. <code>[PATH_TO_EXPORT]</code> Where to save the exported descriptor in JSON format. If not set, the current directory will be used."},{"location":"commands/#dem-import-path_to_dev_env","title":"<code>dem import PATH_TO_DEV_ENV</code>","text":"<p>Description:</p> <p>Imports a Development Environment descriptor.</p> <p> After the import, the Development Environment can be installed with the <code>install</code>  command.</p> <p>Note</p> <p>The file to import only contains the Development Environment descriptor. To install the Dev Env the DEM needs access to all the registries where the required images are stored.</p> <p>Arguments:</p> Argument Description Required <code>PATH_TO_DEV_ENV</code> Path of the JSON file to import."},{"location":"commands/#dem-info-dev_env_name-options-catalog_names","title":"<code>dem info DEV_ENV_NAME [OPTIONS] [*CATALOG_NAMES]</code>","text":"<p>Description:</p> <p>Get information about the specified Development Environment available locally or in the catalogs.</p> <p>Options:</p> Options Description <code>--cat</code> DEM will search for the Dev Env in the catalogs and will print the details of the first match. You can specifiy the catalogs' name to search in after this option. If no catalog is specified, all the available catalogs will be used. If the Dev Env is not found in the catalogs, an error message will be printed. <p> Autocomplete only works with the locally avialable Dev Envs.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to get info about. <code>[OPTIONS]</code> <code>--cat</code>: Search in the catalogs. <code>[*CATALOG_NAMES]</code> List of catalogs to search in (separated by space). <p>Examples:</p> Example Description <code>dem info dev_env_name</code> Get information about the locally available Development Environment. <code>dem info dev_env_name --cat</code> Get information about the Development Environment from the catalogs. <code>dem info dev_env_name --cat catalog1 catalog2</code> Get information about the Development Environment from the catalog1 and catalog2."},{"location":"commands/#dem-init-project_path","title":"<code>dem init [PROJECT_PATH]</code>","text":"<p>Description:</p> <p>Initialize a project with the assigned Development Environment.</p> <p> After the initialization, the Development Environment can be installed with the <code>install</code>  command.</p> <p>Arguments:</p> Argument Description Required <code>[PROJECT_PATH]</code> Path of the project to initialize. If not set, the current working directory will be used."},{"location":"commands/#dem-install-dev_env_name","title":"<code>dem install DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Install the selected Development Environment. DEM pulls all the required containerized tools (which  are not yet available on the host PC) from the registry and install the Development Environment  locally. If the same Development Environment is already installed, but the installation is not  complete, the missing tool images get obtained from the registry.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to install."},{"location":"commands/#dem-list-options-catalog_names","title":"<code>dem list [OPTIONS] [*CATALOG_NAMES]</code>","text":"<p>Description:</p> <p>List the locally available Dev Envs.</p> <p>Options:</p> Options Description <code>--cat</code> List the available Dev Envs from the catalogs. Specify the catalogs' name to list the Dev Envs from. More then one catalog can be specified. If no catalog is specified, all the available catalogs will be used. <p>Arguments:</p> Argument Description Required <code>[OPTIONS]</code> <code>--cat</code>: List the Dev Envs from the catalogs. <code>[*CATALOG_NAMES]</code> List of catalogs to list the Dev Envs from (separated by space). <p>Examples:</p> Example Description <code>dem list</code> List the locally available Dev Envs. <code>dem list --cat</code> List all the Dev Envs from all the available catalogs. <code>dem list --cat catalog1 catalog2</code> List all the Dev Envs from the catalog1 and catalog2."},{"location":"commands/#dem-list-tools-options-registry_names","title":"<code>dem list-tools [OPTIONS] [*REGISTRY_NAMES]</code>","text":"<p>Description:</p> <p>List the available tools.</p> <p>Options:</p> Options Description <code>--reg</code> List the available tools from the registries. Specify the registries' name to list the tools from. More then one registry can be specified. If no registry is specified, all the available registries will be used. <p>Arguments:</p> Argument Description Required <code>[OPTIONS]</code> <code>--reg</code>: List the tools from the registries. <code>[*REGISTRY_NAMES]</code> Registries to list the tools from (separated by space). <p>Examples:</p> Example Description <code>dem list-tools</code> List the locally available tools. <code>dem list-tools --reg</code> List all the tools from all the available registries. <code>dem list-tools --reg registry1 registry2</code> List all the tools from the registry1 and registry2."},{"location":"commands/#dem-modify-dev_env_name","title":"<code>dem modify DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Modify a Development Environment descriptor available from the local descriptor storage (catalog).</p> <p>Running this command will open up the Dev Env Settings Window, prefilled with the current selection:</p> <p></p> <p>The table on the left shows the available tool types. Select the ones you want to use in the  Development Environment. You can navigate with the  and  or   and  keys. Move the cursor to the tool image you would like to  select or deselect  and press the .  On the right side, you can see the tool images that are selected.</p> <p>When the Dev Env is ready, press  on the <code>save</code> button.</p> <p>Info</p> <p>After the modification, the Development Environment can be installed with the <code>install</code> command.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to modify."},{"location":"commands/#dem-rename-dev_env_name-new_dev_env_name","title":"<code>dem rename DEV_ENV_NAME NEW_DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Rename the Development Environment.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to rename. <code>NEW_DEV_ENV_NAME</code> The new name."},{"location":"commands/#dem-run-dev_env_name-task_name","title":"<code>dem run [DEV_ENV_NAME] TASK_NAME</code>","text":"<p>Description:</p> <p>Run the task of the Development Environment. The Dev Env must be installed.</p> <p>If the Dev Env is not specified, the default Dev Env will be used. If the default Dev Env is not set, an error message will be printed.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to run the task in. If not set, the default Dev Env will be used. <code>TASK_NAME</code> The name of the task to run."},{"location":"commands/#dem-set-default-dev_env_name","title":"<code>dem set-default DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Set the selected Development Environment as the default one.</p> <p>The default Development Environment is used when the <code>dem run</code> command is run without specifying a Development Environment.</p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to set as default."},{"location":"commands/#dem-uninstall-dev_env_name","title":"<code>dem uninstall DEV_ENV_NAME</code>","text":"<p>Description:</p> <p>Uninstall the selected Development Environment.</p> <p>Sets the installed flag to False. DEM checks whether  a tool image is required or not by any of the remaining installed local Development Environments. In case the tool image is not required anymore, the DEM tries to delete it. </p> <p>Arguments:</p> Argument Description Required <code>DEV_ENV_NAME</code> Name of the Development Environment to uninstall."},{"location":"commands/#catalog-management","title":"Catalog management","text":""},{"location":"commands/#dem-add-cat-name-url","title":"<code>dem add-cat NAME URL</code>","text":"<p>Description:</p> <p>Add a new catalog.</p> <p>You can name the catalog as you wish. The URL must point to an HTTP(S) server where the Catalog JSON file is available.</p> <p>Arguments:</p> Argument Description Required <code>NAME</code> Name of the catalog to add. <code>URL</code> URL of the catalog file."},{"location":"commands/#dem-del-cat-name","title":"<code>dem del-cat NAME</code>","text":"<p>Description:</p> <p>Delete a catalog.</p> <p>Arguments:</p> Argument Description Required <code>NAME</code> Name of the catalog to delete."},{"location":"commands/#dem-list-cat","title":"<code>dem list-cat</code>","text":"<p>Description:</p> <p>List the available catalogs.</p>"},{"location":"commands/#registry-management","title":"Registry management","text":""},{"location":"commands/#dem-add-reg-name-url-namespace","title":"<code>dem add-reg NAME URL [NAMESPACE]</code>","text":"<p>Description:</p> <p>Add a new registry.</p> <p>The name of the registry must be unique. The URL must point to the registry's API. </p> <p>The namespace is only required for the Docker Hub.</p> <p>Examples:</p> <p>Add a Docker Hub registry called <code>axem</code> with the namespace <code>axemsolutions</code></p> <pre><code>dem add-reg axem https://registry.hub.docker.com axemsolutions\n</code></pre> <p>Add a self-hosted registry called <code>local</code></p> <pre><code>dem add-reg local http://localhost:5000\n</code></pre> <p>Note</p> <p>The Docker Hub API URL is https://registry.hub.docker.com.</p> <p>Arguments:</p> Argument Description Required <code>NAME</code> Unique name for the registry. <code>URL</code> API URL of the registry. <code>NAMESPACE</code> Namespace inside the registry."},{"location":"commands/#dem-del-reg-name","title":"<code>dem del-reg NAME</code>","text":"<p>Description:</p> <p>Delete a registry.</p> <p>Arguments:</p> Argument Description Required <code>NAME</code> Name of the registry to delete."},{"location":"commands/#dem-list-reg","title":"<code>dem list-reg</code>","text":"<p>Description:</p> <p>List the available registries.</p>"},{"location":"commands/#host-management","title":"Host management","text":""},{"location":"commands/#dem-add-host-name-address","title":"<code>dem add-host NAME ADDRESS</code>","text":"<p>Description:</p> <p>Add a new host to the configuration.</p> <p>Arguments:</p> Argument Description Required <code>NAME</code> Name of the host. <code>ADDRESS</code> IP or hostname of the host."},{"location":"commands/#dem-del-host-name","title":"<code>dem del-host NAME</code>","text":"<p>Description:</p> <p>Delete a host from the config file.</p> <p>Arguments:</p> Argument Description Required <code>NAME</code> Name of the host to delete."},{"location":"commands/#dem-list-host","title":"<code>dem list-host</code>","text":"<p>Description:</p> <p>List the available hosts from the config file.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#registries","title":"registries","text":"<p>The <code>registries</code> section of the configuration file is used to define the registries that DEM will  use to search for images. </p> <p>Default value:</p> <pre><code>\"registries\": [\n    {\n        \"name\": \"axem\",\n        \"namespace\": \"axemsolutions\",\n        \"url\": \"https://registry.hub.docker.com\"\n    }\n]\n</code></pre> <p>Info</p> <p>The Registry Management commands can be used to manage the registries in the configuration file.  </p> <ul> <li><code>add-reg</code>: Add a new registry to the configuration file.</li> <li><code>del-reg</code>: Delete a registry from the configuration file.</li> <li><code>list-reg</code>: List the registries in the configuration file.</li> </ul>"},{"location":"configuration/#catalogs","title":"catalogs","text":"<p>The <code>catalogs</code> section of the configuration file is used to define the catalogs that DEM will use to search for Development Environment descriptors.</p> <p>** Default value: **</p> <pre><code>\"catalogs\": [\n    {\n        \"name\": \"axem\",\n        \"url\": \"https://axemsolutions.io/dem/dev_env_org.json\"\n    }\n]\n</code></pre> <p>Info</p> <p>The Catalog Management commands can be used to manage the catalogs in the configuration file.</p> <ul> <li><code>add-cat</code>: Add a new catalog to the configuration file.</li> <li><code>del-cat</code>: Delete a catalog from the configuration file.</li> <li><code>list-cat</code>: List the catalogs in the configuration file.</li> </ul>"},{"location":"configuration/#hosts","title":"hosts","text":"<p>Warning</p> <p>Remote hosts are not yet supported in DEM.</p> <p>The <code>hosts</code> section of the configuration file is used to define the hosts that DEM will use as  remote execution environments.</p> <p>Default value:</p> <pre><code>\"hosts\": []\n</code></pre> <p>Info</p> <p>The Host Management commands can be used to manage the hosts in the configuration file.</p> <ul> <li><code>add-host</code>: Add a new host to the configuration file.</li> <li><code>del-host</code>: Delete a host from the configuration file.</li> <li><code>list-host</code>: List the hosts in the configuration file.</li> </ul>"},{"location":"configuration/#http_request_timeout_s","title":"http_request_timeout_s","text":"<p>The <code>http_request_timeout_s</code> section of the configuration file is used to define the timeout for HTTP requests in seconds.</p> <p>Default value:</p> <pre><code>\"http_request_timeout_s\": 2\n</code></pre>"},{"location":"configuration/#use_native_system_cert_store","title":"use_native_system_cert_store","text":"<p>The <code>use_native_system_cert_store</code> section of the configuration file is used to define whether the native system certificate store should be used for HTTPS requests or the default one provided by the <code>certifi</code> package.</p> <p>Default value:</p> <pre><code>\"use_native_system_cert_store\": false\n</code></pre> <p>Info</p> <p>If the TLS authentication fails, try setting this value to <code>true</code>.</p>"},{"location":"design/","title":"Design (for DEM developers)","text":""},{"location":"design/#architectural-overview","title":"Architectural Overview","text":"<p>This chapter contains the technical documentation of the design.</p> <p>The Development Environment Manager (DEM) provides an abstraction layer for the Development  Platform, which encompasses a collection of available resources, such as registries, catalogs,  container engines, and more. The modules that compose the platform form the core of DEM.</p> <p>DEM implements commands that can interact with the platform. These commands can be executed  using the command line interface (CLI). Additionally, some commands utilize a Text-based User  Interface (TUI) that can be presented on the user's terminal.</p> <p></p> <p>The CLI can communicate with the platform in two ways:</p> <ol> <li>Over the Platform API, which can be achieved by instantiating the DevEnvLocalSetup class.</li> <li>By registering a UserOutput class, which is used by the core modules to interact with the user.</li> </ol> <p>The platform offers the following resources:</p> <ol> <li>Tool images (<code>tool_images</code>): You can use this resource to access tool images from both your  local storage and the registries.</li> <li>Container Engine (<code>container_engine</code>): This resource covers various operations related to the  container engine, including:<ul> <li>Pulling images</li> <li>Running containers</li> <li>Removing images</li> <li>Searching for images</li> </ul> </li> <li>Registries (<code>registries</code>): This resource contains information about the available registries. You can perform actions such as:<ul> <li>Adding or deleting registries</li> <li>Listing the images stored in a registry</li> <li>Pulling an image from a registry</li> </ul> </li> <li>Local Development Environments (<code>local_dev_envs</code>):  This resource provides a list of local  Development Environments. You can obtain information about a specific Development Environment using  this resource.</li> <li>Development Environment Catalogs (<code>dev_env_catalogs</code>): This resource deals with the available  catalogs. You can perform the following actions:<ul> <li>Adding or deleting catalogs</li> <li>Listing the Development Environments within a catalog</li> <li>Cloning a Development Environment descriptor from a catalog </li> </ul> </li> </ol>"},{"location":"design/#core-components","title":"Core Components","text":"The dependency graph of the core modules <p>As shown in the diagram, the platform module depends on the rest of the resources. This concept  allows for the creation of a unified interface for all internal resources.</p> <p>The relationships between classes in the core modules can be observed in the  Core Class Diagram.</p>"},{"location":"design/#third-party-modules","title":"Third-party Modules","text":""},{"location":"design/#typer","title":"Typer","text":"<p>This module is used to create a framework for the CLI commands. You can add a new command by  extending the list of functions in the main.py file and applying the <code>@typer_cli.command()</code>  decorator.</p>"},{"location":"design/#rich","title":"Rich","text":"<p>Rich is a Python library used for formatting text with colors and styles, displaying advanced  content like tables, markdown, and syntax-highlighted code. DEM employs this module to present information to the user in the command line.</p>"},{"location":"design/#requests","title":"Requests","text":"<p>Requests is an HTTP library for Python.</p>"},{"location":"design/#readchar","title":"Readchar","text":"<p>This module can be used to capture character inputs. In cases where the Rich module is not suitable,  Readchar is a useful tool for obtaining user input. </p> <p>For instance, when the Rich module occupies the entire terminal for a TUI panel, Readchar can be  used to capture navigation input by reading individual characters.</p>"},{"location":"design/#docker","title":"Docker","text":"<p>Docker is used to communicate directly with the Docker Engine. (The Docker CLI is not utilized.)</p>"},{"location":"design/#command-setup","title":"Command setup","text":"<p>The commands can interact with the Platform by instantiating the DevEnvLocalSetup class, which  should provide all the necessary functionality from the core modules.</p> <p>For a detailed description of the functionality of each command, please refer to the Commands  chapter. In this section, we provide flowcharts to describe the execution logic.</p> <ul> <li>add-cat</li> <li>add-reg</li> <li>create</li> <li>delete</li> <li>del-reg</li> <li>info</li> <li>init (without assigned dev env)</li> <li>init (with assigned dev env)</li> <li>list</li> <li>modify</li> <li>uninstall</li> <li>add-host</li> <li>clone</li> <li>del-cat</li> <li>del-host</li> <li>export</li> <li>install</li> <li>load</li> <li>rename</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>To use DEM on your PC, you need to have the following tools installed:</p> <ul> <li>Python 3.10+</li> <li>Docker Engine 24.0+</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>First, install Python and Docker if you haven't already:</p> <ul> <li>Python</li> <li>Docker</li> </ul> <p>Make sure to include pip during Python installation.</p> <p>Install DEM from the PyPI repository using:</p> <pre><code>pip install axem-dem\n</code></pre> <ul> <li>The package name is 'axem-dem', but the command is <code>dem</code>.</li> <li>Ensure the Docker daemon is running before using DEM.</li> </ul>"},{"location":"installation/#enable-autocompletion","title":"Enable autocompletion","text":"<p>After installation, you can enable the autocompletion for bash and zsh shells</p> <pre><code>dem --install-completion\n</code></pre> <p>If the command doesn't work, specify your shell type as an input parameter (powershell, bash, or zsh).</p> <p>Note for zsh users: <code>compinit</code> must be called from your .zshrc.</p> <p>Example Tutorial</p> <p>Learn by doing! Try our tutorial  with a simple embedded project!</p>"},{"location":"installation/#alternative-method-run-dem-from-source","title":"Alternative method: run DEM from source","text":"<p>To run the DEM from source, you need to clone the repository first</p> <pre><code>git clone https://github.com/axem-solutions/dem\n</code></pre> <p>DEM can be run as a Python module. To do this, you need to add the <code>-m</code> flag to your command.</p> <p>For example:</p> <pre><code>python -m dem list\n</code></pre> <p>We use poetry to manage dependencies. To ensure that you use the  correct versions of the required modules, you should enter the preconfigured virtual environment.</p> <p>If you don't have poetry installed, you can install it with:</p> <pre><code>pip install poetry\n</code></pre> <p>First install the environment with required dependencies:</p> <pre><code>poetry install\n</code></pre> <p>Enter the virtual environment:</p> <pre><code>poetry shell\n</code></pre> <p>Inside the virtual environment, you can run DEM the same way as it was an installed package:</p> <pre><code>dem list\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Learn by doing!</p> <p>Try our tutorial  with a simple embedded project!</p> <p>Now that you have DEM installed, you might find yourself in one of the following scenarios:</p>"},{"location":"quickstart/#id-like-to-start-with-a-template","title":"I'd like to start with a template...","text":"<p>Here at axem we'd like to create a template for every target out there. List the currently available ones with:</p> <pre><code>dem list --cat\n</code></pre> <p>You can clone the selected template with:</p> <pre><code>dem clone DEV_ENV_NAME\n</code></pre>"},{"location":"quickstart/#id-like-to-work-on-a-project-already-configured-with-dem","title":"I'd like to work on a project already configured with DEM...","text":"<p>In this case you only need to initialize the Dev Env with:</p> <pre><code>dem init\n</code></pre>"},{"location":"quickstart/#id-like-to-use-a-dev-env-someone-shared-with-me","title":"I'd like to use a Dev Env someone shared with me...","text":"<p>You can import a Dev Env descriptor JSON with: </p> <pre><code>dem import DEV_ENV_NAME\n</code></pre>"},{"location":"quickstart/#id-like-to-create-my-own-dev-env-from-scratch","title":"I'd like to create my own Dev Env from scratch...","text":"<p>Create a brand new Dev Env with the following command:</p> <pre><code>dem create DEV_ENV_NAME\n</code></pre> <p>Info</p> <p>We believe that a project's dependencies should be stored in the project's repository. This way, every developer can use the same Development Environment. A Dev Env can be assigned to the  project with the <code>assign</code> command.</p> <p>At this point you have the Development Environment's blueprint - its descriptor - in your local  catalog, which you can modify to your needs. You might want to:</p> <ul> <li>Add/remove tools.</li> <li>Change the tool image for a given tool.</li> </ul> <p>You can edit it with the Development Environment settings window:</p> <pre><code>dem modify DEV_ENV_NAME\n</code></pre> <p>Finally, if you are ready to use it, you can install it with:</p> <pre><code>dem install DEV_ENV_NAME\n</code></pre> <p> You are ready to start working with your Development Environment!</p> <p>For more detailed instructions about the commands please refer to the Commands chapter.</p>"}]}