{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>DEM (Development Environment Manager) is an open source command line tool to manage  containerized Development Environments.</p> <p>Info</p> <p>Currently, only the Linux operating system and the Docker Container Engine is supported.</p> <p>Feel free to ask any questions at discussions.</p> <p>Example Tutorial</p> <p>Learn by doing! Try our tutorial  with a simple embedded project!</p>"},{"location":"#developing-embedded-software","title":"Developing Embedded Software","text":"<p>Writing software for other architectures than our host usually requires a lot of different tools. The software tools used for a specific project can be grouped and they form a  Development Environment. To make it simpler to work with these tools, they are typically bundled  together into an IDE (Integrated Development Environment).</p>"},{"location":"#concept","title":"Concept","text":""},{"location":"#unlock-loose-coupling-between-tools","title":":unlock: Loose coupling between tools","text":"<p>One of the biggest disadvantages of IDEs is that sometimes it is hard to use the underlying  integrated tools separately. They might depend on the IDE itself or each other, so standalone usage can be difficult and the whole IDE installation is required.</p> <p>DEM's goal is to reduce these dependencies and provide the possibility of standalone usage.</p>"},{"location":"#octicons-container-24-separated-environments-for-the-tools","title":":octicons-container-24: Separated environments for the tools","text":"<p>In a generic setup, the used tools can interfere with each other or the underlying host system, causing hardly detectable and fixable issues throughout the development process. It can be really  devastating to see two PCs generating different binaries from the same source, and after days of  debugging to find out that an environment variable had a different value for some obscure reason. </p> <p>To eliminate this problem, the tools need to operate in their own isolated environments. A  lightweight and fast solution for isolation is containerization. The tools get built into their  respective container images, and the way they communicate with the host system can be controlled.</p>"},{"location":"#arrows_counterclockwise-scaleable-tool-management","title":":arrows_counterclockwise: Scaleable tool management","text":"<p>Changes in the tools used for development may be necessary several times during the development  lifecycle. DEM makes the change easy by providing a way to quickly swap tool images:</p> <ul> <li>to use a different version of the same tool </li> <li>to use a completely different tool</li> </ul> <p>Containerization ensures the safe coexistence of the same tools with different version numbers. Adding a new tool is as simple as to change one, making the Development Environment very  scalable.</p>"},{"location":"#material-share-reliable-development-environment-sharing","title":":material-share: Reliable Development Environment sharing","text":"<p>To create software predictively and effectively, it is crucial to have a consistent Development Environment for every developer in the organization. With DEM, you can easily share the same environment with every coworker.</p>"},{"location":"#rocket-quick-and-reproducible-setup","title":":rocket: Quick and reproducible setup","text":"<p>Before starting to work on a project, setting up the required tools can be a time-consuming task.  Using DEM to install a new Development Environment is a single command.</p> <p>If some modifications must be added to an old project no one worked on for a while, installing the  required toolset can be an exhausting task. With DEM the Development Environments can be stored in a Catalog and can be reinstalled whenever needed.</p>"},{"location":"commands/","title":"Commands","text":"<p>Warning</p> <p>Always put the input text into double quotation marks (\"\") if it contains whitespaces.</p>"},{"location":"commands/#dem-list-options","title":"<code>dem list [OPTIONS]</code>","text":"<p>List the Development Environments installed locally or available in the catalog.</p> <p>Options:</p> <ul> <li>Level 1:<ul> <li><code>--local</code> Scope is the local host.</li> <li><code>--all</code> Scope is the catalog.</li> </ul> </li> <li>Level 2:<ul> <li><code>--env</code> List the Development Environments.</li> <li><code>--tool</code> List the tool images.</li> </ul> </li> </ul> <p>The following option combinations are supported:</p> <p><code>--local --env</code> -&gt; List the local Development Environments. <code>--all --env</code> -&gt; List the catalog Development Environments. <code>--local --tool</code> -&gt; List the local tool images. <code>--all --tool</code> -&gt; List the tool images available in the registries.</p>"},{"location":"commands/#development-environment-management","title":"Development Environment management","text":""},{"location":"commands/#dem-info-dev_env_name","title":"<code>dem info DEV_ENV_NAME</code>","text":"<p>Get information about the specified Development Environment.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to get info about. [required]</p>"},{"location":"commands/#dem-create-dev_env_name","title":"<code>dem create DEV_ENV_NAME</code>","text":"<p>Create a new Development Environment.</p> <p>Running this command will open up an interactive UI on the command line. Follow the steps below to configure the new Environment.</p> <ol> <li> <p>First you need to select the tool types. You can navigate with the :material-arrow-up: and :material-arrow-down: or :material-alpha-k: and :material-alpha-j: keys. Select the required tool types with :material-keyboard-space:. Select next if you finished the selection.</p> <p></p> </li> <li> <p>Assign the required tool images for the selected types. You can navigate with the :material-arrow-up: and :material-arrow-down: or :material-alpha-k: and :material-alpha-j: keys. Select the required tool image and press :material-keyboard-return:.</p> <p></p> </li> </ol> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to create. [required]</p>"},{"location":"commands/#dem-clone-dev_env_name","title":"<code>dem clone DEV_ENV_NAME</code>","text":"<p>Clone a Development Environment descriptor from the catalogs. </p> <p>Only the Development Environment descriptor gets cloned, the required tool images are not pulled. To pull the required tool images, use the <code>install</code> command. If a Development Environment with the same name has been already available on the host PC, the user will be asked if they want to overwrite it or not.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment, whose descriptor to clone. [required]</p>"},{"location":"commands/#dem-rename-dev_env_name-new_dev_env_name","title":"<code>dem rename DEV_ENV_NAME NEW_DEV_ENV_NAME</code>","text":"<p>Rename the Development Environment.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code>      Name of the Development Environment to rename. [required] <code>NEW_DEV_ENV_NAME</code>  The new name.  [required]</p>"},{"location":"commands/#dem-modify-dev_env_name","title":"<code>dem modify DEV_ENV_NAME</code>","text":"<p>Modify a tool in a Development Environment.</p> <p>If the tool type is not specified, the Dev Env settings panel will be opened:</p> <ol> <li> <p>The dem shows a list of the already selected tools. You can modify the selection. You can navigate with the :material-arrow-up: and :material-arrow-down: or :material-alpha-k: and :material-alpha-j: keys. Modify the required tool types with :material-keyboard-space:. Select next when you're done with the selection.</p> <p></p> </li> <li> <p>Assign the required tool images for the selected types. You can navigate with the :material-arrow-up: and :material-arrow-down: or :material-alpha-k: and :material-alpha-j: keys. Select the required tool image and press :material-keyboard-return:.</p> <p></p> </li> </ol> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to modify. [required] <code>[TOOL_TYPE]</code> The type of the tool to modify. [optional] <code>[TOOL_IMAGE]</code> The tool image to set for the tool type. [optional]</p>"},{"location":"commands/#dem-delete-dev_env_name","title":"<code>dem delete DEV_ENV_NAME</code>","text":"<p>Delete the Dev Env descriptor from the local descriptor storage. If the Dev Env is installed, the user will be asked whether they want to uninstall it. </p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to delete. [required]</p>"},{"location":"commands/#dem-cp-dev_env_name-new_dev_env_name","title":"<code>dem cp DEV_ENV_NAME NEW_DEV_ENV_NAME</code>","text":"<p>Create a copy of an existing local Development Environment.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to copy. [required]</p> <p><code>NEW_DEV_ENV_NAME</code> Name of the New Development Environment. [required]</p>"},{"location":"commands/#dem-install-dev_env_name","title":"<code>dem install DEV_ENV_NAME</code>","text":"<p>Install the selected Development Environment. DEM pull all the required containerized tools (which  are not yet available on the host PC) from the registry and install the Development Environment  locally. If the same Development Environment is already installed, but the installation is not  complete, the missing tool images are obtained from the registry.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to install. [required]</p>"},{"location":"commands/#dem-uninstall-dev_env_name","title":"<code>dem uninstall DEV_ENV_NAME</code>","text":"<p>Uninstall the selected Development Environment. Set installed flag to False if it was True. Dem checks whether a tool image is required or not by any of the remaining installed local Development Environments. In case the tool image is not required anymore, the dem delete it. </p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to uninstall. [required]</p>"},{"location":"commands/#dem-assign-dev_env_name-project_path","title":"<code>dem assign DEV_ENV_NAME, [PROJECT_PATH]</code>","text":"<p>Assign a Development Environment to a project.</p> <p>If the project already has a Development Environment assigned, the user will be asked if they want to overwrite it or not.</p> <p>Projects that have a Development Environment assigned can initialized with the <code>init</code> command.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to assign. [required]</p> <p><code>[PROJECT_PATH]</code> Path of the project to assign the Development Environment to. If not set, the current working directory will be used.</p>"},{"location":"commands/#dem-init-project_path","title":"<code>dem init [PROJECT_PATH]</code>","text":"<p>Initialize a project with the assigned Development Environment.</p> <p>Arguments:</p> <p><code>PROJECT_PATH</code> Path of the project to initialize. If not set, the current working directory will be used.</p>"},{"location":"commands/#dem-run-dev_env_name","title":"<code>dem run DEV_ENV_NAME *</code>","text":"<p>:warning: Experimental feature!</p> <p>Run a container in the context of a Development Environment.</p> <p>This command works the same way as the <code>docker run</code>, but with some restrictions, and the first argument is the name of the Development Environment.</p> <p>:warning: The supported docker run options: <code>-p, --name, -v, --privileged, --rm, --name, -d</code> See the Docker documentation for more info.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment. [required]</p> <p><code>*</code> Variable-length argument list that will be passed to the <code>docker run</code> command.</p>"},{"location":"commands/#dem-export-dev_env_name-path_to_export","title":"<code>dem export DEV_ENV_NAME [PATH_TO_EXPORT]</code>","text":"<p>Export a Development Environment descriptor in JSON format to a text file. This file can be imported with the <code>load</code> command on another host. </p> <p>The way the file gets named can be set by the PATH_TO_EXPORT argument:</p> <ol> <li>If it's not set, the file gets saved to the current directory with the name of the Development  Environment and without extension.</li> <li>If only a name is set, the file gets saved with that name to the current directory, optionally  with the set extension.</li> <li>If the argument is a directory path, the file gets saved there with the name of the Development  Environment, without extension.</li> <li>If the argument is a path with the file name, then the exported content gets saved into that file. The extension can be set with the file name.</li> </ol> <p>Note</p> <p>The exported file only contains the Development Environment descriptor in JSON format. For a  successful import the DEM needs access to all the registries where the required images are  stored.</p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> The name of the Development Environment to export.</p> <p><code>[PATH_TO_EXPORT]</code> Where to save the exported descriptor in JSON format. If not set, the current  directory will be used.</p>"},{"location":"commands/#dem-load-path_to_dev_env","title":"<code>dem load PATH_TO_DEV_ENV</code>","text":"<p>Imports a Development Environment.</p> <p>Note</p> <p>The file to import only contains the Development Environment descriptor. For a successful import the DEM needs access to all the registries where the required images are stored.</p> <p>Arguments:</p> <p><code>PATH_TO_DEV_ENV</code> Path of the JSON file to import. Can be an absolute path or a relative path to the  current directory.</p>"},{"location":"commands/#development-environment-catalog-management","title":"Development Environment Catalog management","text":""},{"location":"commands/#dem-list-cat","title":"<code>dem list-cat</code>","text":"<p>List the available catalogs.</p>"},{"location":"commands/#dem-add-cat-name-url","title":"<code>dem add-cat NAME URL</code>","text":"<p>Add a new catalog. You can name the catalog as you wish. The URL must point to an HTTP(S) server where the Catalog JSON file is available.</p> <p>Arguments:</p> <p><code>NAME</code> Name of the catalog to add. [required]</p> <p><code>URL</code> URL of the catalog file. [required]</p>"},{"location":"commands/#dem-del-cat-name","title":"<code>dem del-cat NAME</code>","text":"<p>Delete a catalog.</p> <p>Arguments:</p> <p><code>NAME</code> Name of the catalog to delete. [required]</p>"},{"location":"commands/#registry-management","title":"Registry management","text":""},{"location":"commands/#dem-list-reg","title":"<code>dem list-reg</code>","text":"<p>List the available registries.</p>"},{"location":"commands/#dem-add-reg-name-url","title":"<code>dem add-reg NAME URL</code>","text":"<p>Add a new registry. The name of the registry is what you would normally use to pull an image. Examples:</p> <ul> <li>If the full image tag is: repository/image:tag -&gt; the name should be repository.</li> <li>If the full image tag is: 192.168.1.1:5000/image:tag -&gt; the name should be 192.168.1.1:5000</li> </ul> <p>The URL should point to the registry's API. For the Docker Hub https://registry.hub.docker.com,  or it can be http://localhost:5000 for a self-hosted one.</p> <p>Arguments:</p> <p><code>NAME</code> Name of the registry to add. [required]</p> <p><code>URL</code> API URL of the registry. [required]</p>"},{"location":"commands/#dem-del-reg-name","title":"<code>dem del-reg NAME</code>","text":"<p>Delete a registry.</p> <p>Arguments:</p> <p><code>NAME</code> Name of the registry to delete. [required]</p>"},{"location":"commands/#host-management","title":"Host management","text":""},{"location":"commands/#dem-add-host-name-address","title":"<code>dem add-host NAME ADDRESS</code>","text":"<p>Add a new host to the configuration.</p> <p>Arguments:</p> <p><code>NAME</code> Name of the host. [required]</p> <p><code>ADDRESS</code> IP or hostname of the host. [required]</p>"},{"location":"commands/#dem-list-host","title":"<code>dem list-host</code>","text":"<p>List the available hosts from the config file.</p>"},{"location":"commands/#dem-install-dev_env_name_1","title":"<code>dem install DEV_ENV_NAME</code>","text":"<p>Install the selected Development Environment. Set installed flag to True. Dem checks which tool image is required by the selected local Development Environments and in case the tool image is not installed, the dem installs it. </p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to install. [required]</p>"},{"location":"commands/#dem-uninstall-dev_env_name_1","title":"<code>dem uninstall DEV_ENV_NAME</code>","text":"<p>Uninstall the selected Development Environment. Set installed flag to False if it was True. Dem checks whether a tool image is required or not by any of the remaining installed local Development Environments. In case the tool image is not required anymore, the dem delete it. </p> <p>Arguments:</p> <p><code>DEV_ENV_NAME</code> Name of the Development Environment to uninstall. [required]</p>"},{"location":"commands/#dem-del-host-name","title":"<code>dem del-host NAME</code>","text":"<p>Delete a host from the config file.</p> <p>Arguments:</p> <p><code>NAME</code> Name of the host to delete. [required]</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#architectural-overview","title":"Architectural Overview","text":"<p>This chapter contains the technical documentation for the design.</p> <p>The Development Environment Manager (DEM) provides an abstraction layer for the Development  Platform, which encompasses a collection of available resources, such as registries, catalogs,  container engines, and more. The modules that compose the platform form the core of the DEM.</p> <p>The DEM implements commands that can interact with the platform. These commands can be executed  using the command line interface (CLI). Additionally, some commands utilize a Text-based User  Interface (TUI) that can be presented on the user's terminal.</p> <p></p> <p>The CLI can communicate with the platform in two ways:</p> <ol> <li>Over the Platform API, which can be achieved by instantiating the DevEnvLocalSetup class.</li> <li>By registering a UserOutput class, which is used by the core modules to interact with the user.</li> </ol> <p>The platform offers the following resources:</p> <ol> <li>Tool images (<code>tool_images</code>): You can use this resource to access tool images from both your  local storage and the registries.</li> <li>Container Engine (<code>container_engine</code>): This resource covers various operations related to the  container engine, including:<ul> <li>Pulling images</li> <li>Running containers</li> <li>Removing images</li> <li>Searching for images</li> </ul> </li> <li>Registries (<code>registries</code>): This resource contains information about the available registries. You can perform actions such as:<ul> <li>Adding or deleting registries</li> <li>Listing the images stored in a registry</li> <li>Pulling an image from a registry</li> </ul> </li> <li>Local Development Environments (<code>local_dev_envs</code>):  This resource provides a list of local  Development Environments. You can obtain information about a specific Development Environment using  this resource.</li> <li>Development Environment Catalogs (<code>dev_env_catalogs</code>): This resource deals with the available  catalogs. You can perform the following actions:<ul> <li>Adding or deleting catalogs</li> <li>Listing the Development Environments within a catalog</li> <li>Cloning a Development Environment descriptor from a catalog </li> </ul> </li> </ol>"},{"location":"design/#core-components","title":"Core Components","text":"The dependency graph of the core modules <p>As shown in the diagram, the platform module depends on the rest of the resources. This concept  allows for the creation of a unified interface for all internal resources.</p> <p>The relationships between classes in the core modules can be observed in the  Core Class Diagram.</p>"},{"location":"design/#third-party-modules","title":"Third-party Modules","text":""},{"location":"design/#typer","title":"Typer","text":"<p>This module is used to create a framework for the CLI commands. You can add a new command by  extending the list of functions in the main.py file and applying the <code>@typer_cli.command()</code>  decorator.</p>"},{"location":"design/#rich","title":"Rich","text":"<p>Rich is a Python library used for formatting text with colors and styles, displaying advanced  content like tables, markdown, and syntax-highlighted code. DEM employs this module to present information to the user in the command line.</p>"},{"location":"design/#requests","title":"Requests","text":"<p>Requests is an HTTP library for Python.</p>"},{"location":"design/#readchar","title":"Readchar","text":"<p>This module can be used to capture character inputs. In cases where the Rich module is not suitable,  Readchar is a useful tool for obtaining user input. </p> <p>For instance, when the Rich module occupies the entire terminal for a TUI panel, Readchar can be  used to capture navigation input by reading individual characters.</p>"},{"location":"design/#docker","title":"Docker","text":"<p>Docker is used to communicate directly with the Docker Engine. (The Docker CLI is not utilized.)</p>"},{"location":"design/#command-setup","title":"Command setup","text":"<p>The commands can interact with the Platform by instantiating the DevEnvLocalSetup class, which  should provide all the necessary functionality from the core modules.</p> <p>For a detailed description of the functionality of each command, please refer to the Commands  chapter. In this section, we provide flowcharts to describe the execution logic.</p> <ul> <li>add-cat</li> <li>add-reg</li> <li>create</li> <li>delete</li> <li>del-reg</li> <li>info</li> <li>init (without assigned dev env)</li> <li>init (with assigned dev env)</li> <li>list</li> <li>modify</li> <li>uninstall</li> <li>add-host</li> <li>clone</li> <li>del-cat</li> <li>del-host</li> <li>export</li> <li>install</li> <li>load</li> <li>rename</li> </ul>"},{"location":"development_environments/","title":"Development Environments","text":""},{"location":"development_environments/#what-is-a-development-environment","title":"What is a Development Environment?","text":"<p>A set of software tools used for a development project is called a Development Environment.</p>"},{"location":"development_environments/#tool-types","title":"Tool types","text":"<p>Currently, the following tool types are supported:</p> <pre><code>- Build system\n- Toolchain\n- Debugger\n- Deployer\n- Test framework\n- CI/CD server\n</code></pre> <p>When creating a new Development Environment the user can select any of the above types and then  assign the required tools to them. </p> <p>Warning</p> <p>In the v0.3.0 we are going to change this behavior and let the users to define their own tool  types.</p>"},{"location":"development_environments/#tool-images","title":"Tool images","text":"<p>To put it simply, a container image is a set of software components alongside its dependencies,  which can be run in a container. The idea is to build the tools from a Development Environment into  their own images, so they can run isolatedly.</p>"},{"location":"development_environments/#registry","title":"Registry","text":"<p>A registry can serve as a storage for tool images, where they can be kept without occupying space on  the developer's computer. This storage enables convenient sharing of images with others, ensuring  uniform tool usage among all collaborators on the same project. When an image is uploaded to a registry, it initiates the creation of a repository. This repository  is responsible for keeping track of the various versions of the image.</p> <p>Note</p> <p>An image repository stores the different versions of the same image. An image registry is a collection of image repositories.</p> <p>The DEM also uses registries in the background to store the tool images. To list the currently  available registries use the <code>dem list-reg</code> command. The <code>dem add-reg</code> and <code>dem del-reg</code> commands  can be used to add or delete registries.</p> <p>Note</p> <p>The DEM supports the Docker Hub and  Docker Registry</p> <p>If you'd like to request support for other registry types, please create a  new descussion.</p>"},{"location":"development_environments/#development-environment-catalogs","title":"Development Environment Catalogs","text":"<p>A catalog is a collection of Development Environment descriptors available to install.  A descriptor  stores the location of the required tool images.  The DEM can handle multiple catalogs. To list the  currently available ones use the <code>dem list-cat</code> command. The <code>dem add-cat</code> and <code>dem del-cat</code>  commands can be used to add or delete catalogs.</p> <p>Note</p> <p>axem has its own catalog, which is by default available for DEM.</p>"},{"location":"development_environments/#development-platform","title":"Development Platform","text":"<p>The registries, the catalogs, and the development infrastructure make up a Development Platform. The users can install new Development Environments from the catalogs in a self-service manner.</p> <p></p>"},{"location":"development_environments/#getting-a-development-environment","title":"Getting a Development Environment","text":"<p>There are three ways to get a Development Environment: </p> <ul> <li>install one from a Catalog </li> <li>create a new one locally</li> <li>load an exported Development Environment descriptor</li> </ul>"},{"location":"development_environments/#installing-from-a-catalog","title":"Installing from a catalog","text":"<p>An organization can create a Development Environment Catalog and share it with its members. This  guarantees that each and every member uses the same toolset in the same environment. </p> <p></p> <p>The members can list the available Development Environments in the organization's catalog with the  following command: <code>dem list --all --env</code></p> <p>Use the <code>dem pull</code> command to install the selected Development Environment.</p> <ol> <li>First the DEM installs the Development Environment descriptor.</li> <li>Then downloads the necessary tool images, which are not yet available on the host PC.</li> </ol> <p>See the <code>dem pull</code> command for more details.</p>"},{"location":"development_environments/#creating-a-new-development-environment-locally","title":"Creating a new Development Environment locally","text":"<p>DEM provides a TUI for creating a new Development Environment that can be started with the  <code>dem create</code> command.</p> <p>See the <code>dem create</code> command for more details.</p>"},{"location":"development_environments/#load-a-development-environment","title":"Load a Development Environment","text":"<p>A locally already available Development Environment can be exported in JSON format with the  <code>dem export</code> command. The exported JSON describes the required tool images and the location of the  registries where they are stored. This file can be shared and on another PC can be imported with the  <code>dem load</code> command. After the DEM loaded the descriptor, it will pull the required tool images.</p> <p>See the <code>dem export</code> and  <code>dem load</code> commands for more details.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>To use the DEM on your PC, you need to have the following tools installed:</p> <ul> <li>Python 3.10+</li> <li>Docker Engine 24.0+</li> </ul> <p>Info</p> <p>Currently only the Linux operating system and the Docker Container Engine is supported.</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>Use the following install script to get the latest version of DEM:     curl -fsSL 'https://raw.githubusercontent.com/axem-solutions/dem/main/install-dem.sh' | bash</p>"},{"location":"installation/#alternative-installation","title":"Alternative installation","text":"<p>If all the prerequisites are fulfilled, the DEM can be installed from the  PyPI repository:</p> <pre><code>pip install axem-dem\n</code></pre> <p>:information_source: The package name is axem-dem, but the command is <code>dem</code>.</p>"},{"location":"installation/#enable-autocompletion","title":"Enable autocompletion","text":"<p>After installation, you can enable the autocompletion for bash and zsh shells</p> <pre><code>dem --install-completion\n</code></pre> <p>Note for zsh users: <code>compinit</code> must be called from your .zshrc.</p>"},{"location":"installation/#optional-use-the-source-code","title":"Optional: Use the source code","text":"<p>The dem is open source, so you can use it as a python  module. To do this, you need to add the <code>-m</code> flag to your command.</p> <p>For example:</p> <pre><code>python -m dem list --local --env\n</code></pre> <p>We use poetry to manage dependencies. To ensure that you use the  correct versions of the required modules, you should enter the preconfigured virtual environment.</p> <p>First install the environment with required dependencies:</p> <pre><code>poetry install\n</code></pre> <p>Enter the virtual environment:</p> <pre><code>poetry shell\n</code></pre>"}]}